{"version":3,"sources":["style/Style.js","components/Search.js","components/DisplayTime.js","components/ShowMap.js","components/ActualWeather.js","App.js","index.js"],"names":["Style","makeStyles","searchWrapper","display","justifyContent","alignItems","margin","marginTop","marginBottom","padding","input","color","minWidth","resultWrapper","imageListItem","width","height","displayTime","orange","detailRight","paddingTop","Search","handleSubmit","location","useRef","classes","Grid","container","spacing","item","className","sm","Paper","id","label","variant","size","inputRef","searchIcon","onClick","current","value","DisplayTime","time","date","Date","day","getDate","month","toLocaleString","hour","getHours","minute","getMinutes","SetViewOnClick","weather","coordinates","useMap","setView","lat","lon","description","charAt","toUpperCase","toLowerCase","slice","Marker","position","Popup","src","icon","alt","style","Math","floor","main","temp","ShowMap","MapContainer","classsName","center","zoom","scrollWheelZoom","TileLayer","attribution","url","ActualWeather","useEffect","xs","direction","dt","name","ImageList","rowHeight","ImageListItem","cols","fontSize","transform","wind","deg","speed","humidity","pressure","visibility","heigh","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","useState","setWeather","query","setQuery","navigator","geolocation","getCurrentPosition","axios","get","coords","latitude","longitude","then","res","data","console","log","alert","textAlign","coord","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb58b2b5.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\nimport orange from '@material-ui/core/colors/orange';\r\n\r\n\r\nconst Style = makeStyles({\r\n\r\n    searchWrapper: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        margin: \"auto\",\r\n        marginTop: 50,\r\n        marginBottom: 50,\r\n        padding: \"1rem\"\r\n\r\n\r\n\r\n    },\r\n    input: {\r\n        color: \"green\",\r\n        minWidth: 350\r\n    },\r\n    resultWrapper: {\r\n        padding: 20\r\n    },\r\n\r\n    imageListItem: {\r\n        width: 45,\r\n        height: 50\r\n\r\n    },\r\n    displayTime: {\r\n        color: orange[900]\r\n\r\n    },\r\n    detailRight: {\r\n        paddingTop: \"7px\"\r\n    }\r\n})\r\n\r\nexport default Style\r\n","import React from 'react';\r\nimport { useRef } from 'react'\r\nimport Input from '@material-ui/core/TextField/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport SearchButton from '@material-ui/core/Button/Button';\r\nimport Style from '../style/Style';\r\n\r\n\r\nconst Search = ({ handleSubmit }) => {\r\n    const location = useRef();\r\n    const classes = Style()\r\n\r\n    return (\r\n\r\n        <Grid container spacing={2} >\r\n            <Grid item className={classes.container} sm={12}>\r\n                <Paper className={classes.searchWrapper}>\r\n                    <Input\r\n                        className={classes.input}\r\n                        id=\"outlined-basic\"\r\n                        label=\"Enter city name\"\r\n                        variant=\"outlined\"\r\n                        size=\"small\"\r\n                        // value={location}\r\n                        // onChange={handleSearch}\r\n                        inputRef={location}\r\n\r\n                    />\r\n                    <SearchButton\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        className={classes.searchIcon}\r\n                        onClick={() => handleSubmit(location.current.value)}\r\n                    >\r\n                        Search\r\n                    </SearchButton>\r\n                </Paper>\r\n            </Grid>\r\n\r\n\r\n\r\n        </Grid>\r\n\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport Style from '../style/Style';\r\n\r\n\r\nconst DisplayTime = ({ time }) => {\r\n    const classes = Style();\r\n\r\n    const date = new Date(time * 1000);\r\n    const day = date.getDate();\r\n    const month = date.toLocaleString('default', { month: 'long' });\r\n    const hour = date.getHours();\r\n    const minute = date.getMinutes();\r\n\r\n\r\n    return (\r\n        <Typography className={classes.displayTime} variant=\"caption\">\r\n            {`${month} ${day}, ${hour}:${(minute < 10) ? \"0\" + minute : minute}`}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default DisplayTime\r\n","import React from 'react';\r\nimport { MapContainer, TileLayer, Popup, Marker, useMap } from 'react-leaflet';\r\n\r\n\r\n\r\n\r\nfunction SetViewOnClick({ weather, coordinates }) {\r\n    const map = useMap();\r\n    map.setView([coordinates?.lat, coordinates?.lon], 8);\r\n    const description = weather?.weather[0]?.description.charAt(0).toUpperCase() + weather?.weather[0]?.description.toLowerCase().slice(1)\r\n    return (\r\n        <Marker position={[coordinates?.lat, coordinates?.lon]}>\r\n            <Popup>\r\n                <img\r\n                    src={`http://openweathermap.org/img/wn/${weather?.weather[0]?.icon}.png`}\r\n                    alt=\"WeatherIcon\"\r\n                    style={{ width: \"18px\" }}\r\n                /> {Math.floor(weather?.main?.temp)}°C<br /> {description}\r\n            </Popup>\r\n        </Marker>\r\n    );\r\n}\r\n\r\nfunction ShowMap({ weather, coordinates }) {\r\n    return (\r\n        <MapContainer\r\n            classsName=\"map\"\r\n            center={[coordinates?.lat, coordinates?.lon]}\r\n            zoom={8}\r\n            scrollWheelZoom={false}\r\n            style={{ height: \"270px\" }}\r\n        >\r\n            <TileLayer\r\n                attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n            />\r\n            <SetViewOnClick weather={weather} coordinates={coordinates} />\r\n        </MapContainer>\r\n    );\r\n}\r\n\r\nexport default ShowMap;\r\n","import React from 'react';\r\nimport { useEffect } from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography/Typography';\r\nimport NavigationIcon from '@material-ui/icons/Navigation';\r\nimport orange from '@material-ui/core/colors/orange';\r\nimport Style from '../style/Style';\r\nimport { ImageList, ImageListItem } from '@material-ui/core';\r\nimport DisplayTime from './DisplayTime';\r\nimport ShowMap from './ShowMap';\r\n\r\n\r\nconst ActualWeather = ({ weather, coordinates }) => {\r\n    const classes = Style();\r\n    const description = weather?.weather[0]?.description.charAt(0).toUpperCase() + weather?.weather[0]?.description.toLowerCase().slice(1)\r\n    useEffect(() => {\r\n        return null\r\n    }, [coordinates])\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n                <Paper className={classes.resultWrapper} >\r\n                    <Grid container direction=\"column\" spacing={2}>\r\n                        <Grid item sm={6} xs={12}>\r\n                            <DisplayTime time={weather?.dt} />\r\n                            <Typography variant=\"h3\">\r\n                                {weather?.name}\r\n                            </Typography>\r\n                            <Grid container alignItems=\"center\" justifyContent=\"flex-start\" spacing={2}>\r\n                                <Grid item sm={2}>\r\n                                    <ImageList rowHeight={50}>\r\n                                        <ImageListItem cols={2}  >\r\n                                            <img\r\n                                                src={`http://openweathermap.org/img/wn/${weather?.weather[0]?.icon}.png`}\r\n                                                alt=\"WeatherIcon\"\r\n                                                className={classes.imageListItem}\r\n                                            />\r\n                                        </ImageListItem>\r\n                                    </ImageList>\r\n                                </Grid>\r\n                                <Grid item sm={10}>\r\n                                    <Typography variant=\"h5\">\r\n                                        {Math.floor(weather?.main?.temp)}°C\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item sm={6} >\r\n                            <Grid container spacing={2} >\r\n                                <Grid item xs={12}>\r\n                                    <Typography> Feels like {Math.floor(weather?.main?.temp)}°C. {description}\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item sm={6} >\r\n                                    <Typography variant=\"subtitle2\">\r\n                                        <NavigationIcon\r\n                                            fontSize=\"small\"\r\n                                            color=\"action\"\r\n                                            style={{\r\n                                                transform: `rotate(${180 + weather?.wind?.deg}deg) `,\r\n                                                color: `${orange}`,\r\n                                            }}\r\n                                        />\r\n                                        {weather?.wind?.speed} m/s\r\n                                        <br />\r\n                                    </Typography>\r\n                                    <Typography variant=\"subtitle2\">\r\n                                        Humidity: {weather?.main?.humidity}%\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid item sm={6} >\r\n                                    <Typography className={classes.detailRight} variant=\"subtitle2\">\r\n                                        Pressure: {weather?.main?.pressure}hPa\r\n                                        <br />\r\n                                    </Typography>\r\n                                    <Typography variant=\"subtitle2\">\r\n                                        Visibility: {weather?.visibility}m\r\n                                    </Typography>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Paper>\r\n            </Grid>\r\n            <Grid item sm={6}>\r\n                {coordinates ? <ShowMap style={{ heigh: \"300px\" }} weather={weather} coordinates={coordinates} /> : \"\"}\r\n\r\n            </Grid>\r\n\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default ActualWeather\r\n","import './App.css';\nimport Container from '@material-ui/core/Container/Container';\nimport Typography from '@material-ui/core/Typography/Typography';\nimport { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Search from './components/Search';\nimport ActualWeather from './components/ActualWeather';\nimport { geolocated } from \"react-geolocated\";\n\nfunction App() {\n  const [weather, setWeather] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n\n  const handleSubmit = (location) => {\n    setQuery(location)\n\n  }\n\n  useEffect(() => {\n    if (!navigator.geolocation) {\n      alert('Geolocation is not supported by your browser');\n    } else if (navigator.geolocation && query === \"\") {\n\n      navigator.geolocation.getCurrentPosition((position) => {\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&units=metric&appid=aacb738b95b7c8ff58e0059ebf01e7e7`)\n          .then(res => setWeather(res.data))\n      });\n    } else {\n      console.log(\"here\")\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=aacb738b95b7c8ff58e0059ebf01e7e7`)\n        .then(res => setWeather(res.data))\n    }\n\n  }, [query])\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Typography variant=\"h2\" style={{ textAlign: \"center\", marginTop: \"2rem\" }}>Weather App </Typography>\n        <Search handleSubmit={handleSubmit} />\n        {\n          (weather !== \"\") ?\n            <ActualWeather weather={weather} coordinates={weather?.coord} /> :\n            <p style={{ textAlign: \"center\" }}>\n              Please enter the city name to get weather information\n            </p>\n        }\n      </Container>\n\n    </div>\n  );\n}\n\nexport default geolocated({\n  positionOptions: {\n    enableHighAccuracy: false,\n  },\n  userDecisionTimeout: 5000,\n})(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}